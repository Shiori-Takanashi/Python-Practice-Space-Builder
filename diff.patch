diff --git a/cli/pbuild.py b/cli/pbuild.py
index 3693969..eb93e63 100644
--- a/cli/pbuild.py
+++ b/cli/pbuild.py
@@ -27,36 +27,58 @@ class TupleParam(click.ParamType):
         """プロジェクト直下で末尾が 's' のディレクトリを全件返す。"""
         root = project_root()
         # glob("*") でも可。引数なしの glob() は誤り。
-        return tuple(p for p in root.iterdir() if p.is_dir() and p.name.endswith("s"))
+        return tuple(p for p in root.iterdir() if p.is_dir() and p.name.endswith("_prac"))
 
     def convert(self, value: str, param, ctx):
         v = value.strip()  # 両端だけ
         if v.lower() == "none":
             return None
-        if v.lower() == "all":
-            return self.get_dirs_endswith_s()
+        # if v.lower() == "all":
+        #     return self.get_dirs_endswith_s()
 
         try:
             # 各トークンにも strip、かつ空要素は除外
-            parts = tuple(p for p in (s.strip() for s in v.split(",")) if p)
-            if not parts:
+            dirnames: list = sorted(p for p in (s.strip() for s in v.split(",")))
+
+            if not dirnames:
                 return None
 
-            paths = tuple(
-                path for name in parts
-                if (path := convert_dirname_to_dirpath(name))
-            )
-            return paths
+            return dirnames
+
         except Exception:
             self.fail(f"{value!r}は誤入力です", param, ctx)
 
 
 # --- 主要クラス ---
 
-class FileChecker:
+class PracChecker:
     def __init__(self) -> None:
         self.root_path = project_root()
 
+    def return_about_dir(self, dirpath: Path) -> str:
+        if not (dirpath.exists() and dirpath.is_dir()):
+            return f"ERROR: {dirpath.name}"
+
+        count = 0
+        for p in dirpath.iterdir():
+            if p.is_file() and p.suffix == ".py":
+                count += 1
+        msg = f"{dirpath.name}({count:02d})"
+        return msg
+
+    def return_pyfiles_name(self, dirpath: Path) -> str:
+        if not (dirpath.exists() and dirpath.is_dir()):
+            return ""
+        pyfiles_name = [p.name for p in dirpath.iterdir() if p.is_file() and p.suffix ==  ".py"]
+        pyfiles_name_with_tab = [f"\t{p}" for p in pyfiles_name]
+        msgs = sorted(pyfiles_name_with_tab)
+        if msgs:
+            msg = "\n".join(msgs)
+        return msg
+
+    def check(self, dirsnames: Iterable[Path]) -> list[str]:
+        return [""]
+
     def search_py_files(self, dir_path: Path) -> list[Path]:
         """指定ディレクトリ内の .py ファイル一覧を Path で返す。"""
         if not dir_path.exists() or not dir_path.is_dir():
@@ -68,7 +90,7 @@ class FileChecker:
         print(f"  >>>  {py_file_path.name}")
         return
 
-class PracMaker:
+class PracBuilder:
     def __init__(self) -> None:
         self.root_path = project_root()
 
@@ -131,13 +153,13 @@ def make_files(total: int, dir_paths: tuple[Path, ...] | None) -> None:
     if dir_paths is None:
         return
 
-    fm = PracMaker()
+    pb = PracBuilder()
 
     click.echo("====== DIR    ======")
 
     dir_msgs = []
     for dirname in dir_paths:
-        msg = fm.setup_dir(dirname)
+        msg = pb.setup_dir(dirname)
         dir_msgs.append(msg)
 
     for dir_msg in dir_msgs:
@@ -147,7 +169,7 @@ def make_files(total: int, dir_paths: tuple[Path, ...] | None) -> None:
 
     init_msgs = []
     for dir_path in dir_paths:
-        msg = fm.setup_init_file(dir_path)
+        msg = pb.setup_init_file(dir_path)
         init_msgs.append(msg)
 
     for init_msg in init_msgs:
@@ -157,7 +179,7 @@ def make_files(total: int, dir_paths: tuple[Path, ...] | None) -> None:
 
     file_msgs = []
     for dirname in dir_paths:
-        msgs = fm.make_py_files_in_total(dirname, total)
+        msgs = pb.make_py_files_in_total(dirname, total)
         file_msgs.extend(msgs)
 
     for file_msg in file_msgs:
@@ -169,16 +191,26 @@ def make_files(total: int, dir_paths: tuple[Path, ...] | None) -> None:
 
 @click.command()
 @click.option("-t", "--total", default=3, type=int, help="ファイルの総数")
-@click.option("-d", "--dir_paths", default="none", type=TUPLE, help="対象ディレクトリ")
+@click.option("-d", "--dirnames", default="none", type=TUPLE, help="対象ディレクトリ")
 @click.option("-c", "--check", is_flag=True, help="確認モードかどうか。")
-def run(total: int, dir_paths: tuple[Path, ...] | None, check: bool) -> None:
-    if check:
-        check_files(dir_paths)
-    else:
-        make_files(total, dir_paths)
-        check_files(dir_paths)
-    return
-
+def run(total: int, dirnames: list[Path, ...] | None, check: bool) -> None:
+    # if check:
+    #     check_files(dir_paths)
+    # else:
+    #     make_files(total, dir_paths)
+    #     check_files(dir_paths)
+    # return
+    dirnames_with_prac = [d + "_prac" for d in dirnames]
+    dirpaths = sorted(convert_dirname_to_dirpath(dirname_with_prac) for dirname_with_prac in dirnames_with_prac)
+
+    pc = PracChecker()
+
+    for dirpath in dirpaths:
+        msg_about_dir = pc.return_about_dir(dirpath)
+        msg_about_pyfiles = pc.return_pyfiles_name(dirpath)
+
+        msg = "\n".join([msg_about_dir, msg_about_pyfiles])
+        click.echo(msg)
 
 if __name__ == "__main__":
     run()
